Index: src/org/thechiselgroup/choosel/protovis/public/js/protovis-3.2-PATCHED/protovis-d3.2-PATCHED.js
===================================================================
--- src/org/thechiselgroup/choosel/protovis/public/js/protovis-3.2-PATCHED/protovis-d3.2-PATCHED.js	(revision 1379)
+++ src/org/thechiselgroup/choosel/protovis/public/js/protovis-3.2-PATCHED/protovis-d3.2-PATCHED.js	(working copy)
@@ -5695,6 +5695,35 @@
   }
   return e;
 };
+pv.SvgScene.ellipse = function(scenes) {
+  var e = scenes.$g.firstChild;
+  for (var i = 0; i < scenes.length; i++) {
+    var s = scenes[i];
+
+    /* visible */
+    if (!s.visible) continue;
+    var fill = s.fillStyle, stroke = s.strokeStyle;
+    if (!fill.opacity && !stroke.opacity) continue;
+
+    // TODO x,y are center coordinates, need rx, ry
+    e = this.expect(e, "ellipse", {
+        "shape-rendering": s.antialias ? null : "crispEdges",
+        "pointer-events": s.events,
+        "cursor": s.cursor,
+        "cx": s.left,
+        "cy": s.top,
+        "rx": s.horizontalRadius,
+        "ry": s.verticalRadius,
+        "fill": fill.color,
+        "fill-opacity": fill.opacity || null,
+        "stroke": stroke.color,
+        "stroke-opacity": stroke.opacity || null,
+        "stroke-width": stroke.opacity ? s.lineWidth / this.scale : null
+      });
+    e = this.append(e, scenes, i);
+  }
+  return e;
+};
 pv.SvgScene.dot = function(scenes) {
   var e = scenes.$g.firstChild;
   for (var i = 0; i < scenes.length; i++) {
@@ -6465,7 +6494,7 @@
 /**
  * The mark type; a lower camelCase name. The type name controls rendering
  * behavior, and unless the rendering engine is extended, must be one of the
- * built-in concrete mark types: area, bar, dot, image, label, line, panel,
+ * built-in concrete mark types: area, bar, ellipse, dot, image, label, line, panel, 
  * rule, or wedge.
  *
  * @type string
@@ -7897,6 +7926,30 @@
     .extend(pv.Mark.prototype.defaults)
     .lineWidth(1.5)
     .fillStyle(pv.Colors.category20().by(pv.parent));
+
+/**
+ * Ellipse prototype: TODO documentation
+ */
+pv.Ellipse = function() {
+  pv.Mark.call(this);
+};
+
+pv.Ellipse.prototype = pv.extend(pv.Mark)
+	.property("horizontalRadius", Number)
+	.property("verticalRadius", Number)
+	.property("lineWidth", Number)
+	.property("strokeStyle", pv.color)
+	.property("fillStyle", pv.color);
+
+pv.Ellipse.prototype.type = "ellipse";
+
+pv.Ellipse.prototype.defaults = new pv.Ellipse()
+	.extend(pv.Mark.prototype.defaults)
+	.lineWidth(1.5)
+	.horizontalRadius(10)
+	.verticalRadius(10)
+	.fillStyle(pv.Colors.category20().by(pv.parent));
+
 /**
  * Constructs a new dot mark with default properties. Dots are not typically
  * constructed directly, but by adding to a panel or an existing mark via
